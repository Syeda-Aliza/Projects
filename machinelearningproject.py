# -*- coding: utf-8 -*-
"""MachineLearningProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-opa5WFXFLewLQec8mJJ2op85BITvE3v

Importing The Dependecies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

"""Data Collection And Analysis"""

big_mart_data= pd.read_csv('/content/Train.csv')

big_mart_data.head()

big_mart_data.shape

big_mart_data.info()

"""Categorical Features:


*   Item Identifier
*   Item Weight
*   Item Fat Content
*   Item Visibility
*   Outlet Identifier
*   Outlet Size
*   Outlet Location Type
*   Outlet Type








"""

big_mart_data.isnull().sum()

"""Handling Missing Value

Mean ---> Average Value
Mode ---> Most Repeated Value
"""

big_mart_data['Item_Weight'].mean()

big_mart_data['Item_Weight'].fillna(big_mart_data['Item_Weight'].mean() , inplace =True)

big_mart_data.isnull().sum()

"""Replacing The Missing Values in "Outlet Size" With Mode"""

mode_of_outlet_size = big_mart_data.pivot_table(values='Outlet_Size', columns='Outlet_Type', aggfunc=lambda x: x.mode()[0])

print(mode_of_outlet_size)

missing_values= big_mart_data['Outlet_Size'].isnull()

print(missing_values)

big_mart_data.loc[missing_values, 'Outlet_Size'] =big_mart_data.loc[missing_values, 'Outlet_Type'].apply(lambda x: mode_of_outlet_size )

big_mart_data.isnull().sum()

"""Data Analysis"""

big_mart_data.describe()

"""Numerical Features"""

sns.set()

plt.figure(figsize = (6,6))
sns.displot(big_mart_data['Item_Weight'])
plt.show()

plt.figure(figsize = (6,6))
sns.displot(big_mart_data['Item_Visibility'])
plt.show()

plt.figure(figsize = (6,6))
sns.displot(big_mart_data['Item_MRP'])
plt.show()

plt.figure(figsize = (6,6))
sns.displot(big_mart_data['Item_Outlet_Sales'])
plt.show()

plt.figure(figsize = (6,6))
sns.countplot(x='Outlet_Establishment_Year', data = big_mart_data)
plt.show()

plt.figure(figsize = (6,6))
sns.countplot(x='Item_Fat_Content', data = big_mart_data)
plt.show()

plt.figure(figsize = (30,6))
sns.countplot(x='Item_Type', data = big_mart_data)
plt.show()

plt.figure(figsize = (30,6))
sns.countplot(x= 'Item_Type', data = big_mart_data)
plt.title('Item_Type count')
plt.show()

big_mart_data['Outlet_Size'] = big_mart_data['Outlet_Size'].astype(str)

plt.figure(figsize=(6, 6))
sns.countplot(x= 'Outlet_Size', data=big_mart_data)
plt.title('Outlet_Size count')
plt.show()

"""Data Pre-Processing"""

big_mart_data.head()

big_mart_data['Item_Fat_Content'].value_counts()

big_mart_data.replace({'Item_Fat_Content': {'low fat' :'Low Fat' , 'LF' :'Low Fat' , 'reg' : 'Regular'}} , inplace=True )

big_mart_data['Item_Fat_Content'].value_counts()

"""Label Encoding"""

encoder = LabelEncoder()

big_mart_data['Item_Identifier']= encoder.fit_transform(big_mart_data['Item_Identifier'])

big_mart_data['Item_Fat_Content']= encoder.fit_transform(big_mart_data['Item_Fat_Content'])

big_mart_data['Item_Type']= encoder.fit_transform(big_mart_data['Item_Type'])

big_mart_data['Outlet_Identifier']= encoder.fit_transform(big_mart_data['Outlet_Identifier'])

big_mart_data['Outlet_Size']= encoder.fit_transform(big_mart_data['Outlet_Size'])

big_mart_data['Outlet_Location_Type']= encoder.fit_transform(big_mart_data['Outlet_Location_Type'])

big_mart_data['Outlet_Type']= encoder.fit_transform(big_mart_data['Outlet_Type'])

big_mart_data.head()

"""Splitting Features And Target"""

X = big_mart_data.drop(columns ='Item_Outlet_Sales', axis=1)
Y = big_mart_data['Item_Outlet_Sales']

print(X)

print(Y)

"""Splitting The Data Into Training And Testing Data"""

X_train, X_test , Y_train ,Y_test = train_test_split (X, Y ,test_size=0.2, random_state=2)

print(X.shape, X_train.shape ,X_test.shape)

"""Machine Learning

XGBoost Regressor
"""

regressor = XGBRegressor()

regressor.fit(X_train ,Y_train)

"""Evaluation"""

training_data_prediction= regressor.predict(X_train)

r2_train = metrics.r2_score(Y_train, training_data_prediction)

print('R Squared Value =', r2_train)

test_data_prediction= regressor.predict(X_test)

r2_test= metrics.r2_score(Y_test ,test_data_prediction)

print('R Squared Value =', r2_test)